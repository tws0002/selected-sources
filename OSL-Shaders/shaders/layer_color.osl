float lerp(float a, float b, float t) 
{
    return (1 - t) * a + t * b;
}

color lerp(color a, color b, float t) 
{
    color r;
    r[0] = lerp(a[0], b[0], t);
    r[1] = lerp(a[1], b[1], t);
    r[2] = lerp(a[2], b[2], t);
    return r;
}


color overlay(color l1,color l2) 
{
    color result;
    for (int i = 0; i < 3; ++i) 
    {
        l1[i] < 0.5 ? result[i] = 2.0 * l1[i] * l2[i] : result[i] = (1.0 - 2.0 * (1.0 - l1[i]) * (1.0 - l2[i]));
    }
    return result;
}

color softlight(color l1, color l2) 
{
    color result;
    for (int i = 0; i < 3; ++i) 
    {
        if (l2[i] < 0.5)
            result[i] = 2.0 * l1[i] * l2[i] + pow(l1[i],2) * (1.0 - 2.0 * l2[i]);
        else
            result[i] = sqrt(l1[i]) * (2.0 * l2[i] - 1.0) + 2.0 * l1[i] * (1.0 - l2[i]);
    }

    return result;
}

float colordodgef(float l1, float l2, int clamp_result) 
{
    float result;
    if (l2 == 1.0) 
    {
        result = l2;
    } 
    else 
    {
        float inre = l1 / (1.0 - l2);
        if (clamp_result)
            inre = min(inre, 1.0);
        result = inre;
    }
    return result;
}

color colordodge(color l1, color l2, int clamp_result) 
{
    color result;
    for (int i = 0; i < 3; ++i) 
    {
        result[i] = colordodgef(l1[i], l2[i], clamp_result);
    }
    return result;
}

float colorburnf(float l1, float l2) 
{
    if (l2 == 0.0)
        return l2;
    else
        return max(1.0 - (1.0 - l1) / l2, 0.0);
}

color colorburn(color l1, color l2) 
{
    color result;
    for (int i = 0; i < 3; ++i) {
        result[i] = colorburnf(l1[i], l2[i]);
    }

    return result;
}


color linearlight(color l1, color l2, int clamp_result) 
{
    color result;
    for (int i = 0; i < 3; ++i) 
    {
        if (l2[i] < 0.5)
            result[i] = l1[i] + 2.0 * l2[i] - 1.0;
        else
            result[i] = l1[i] + 2.0 * (l2[i] - 0.5);
    }

    if (clamp_result)
        result = clamp(result, color(0,0,0), color(1,1,1));

    return result;
}

color vividlight(color l1, color l2, int clamp_result) 
{
    color result;
    for (int i = 0; i < 3; ++i) {
        if (l2[i] < 0.5) 
            result[i] = colorburnf(l1[i], 2.0 * l2[i]);
        else
            result[i] = colordodgef(l1[i], 2.0 * (l2[i] - 0.5), clamp_result);
    }

    return result;
}

color pinlight(color l1, color l2) 
{
    color result;
    for (int i = 0; i < 3; ++i) 
    {
        if (l2[i] < 0.5)
            result[i] = min(l1[i], 2.0 * l2[i]);
        else
            result[i] = max(l1[i], 2.0 * (l2[i] - 0.5));
    }

    return result;
}

color hardmix(color l1, color l2, int clamp_result) 
{
    color result = vividlight(l1, l2, clamp_result);
    for (int i = 0; i < 3; ++i) 
    {
        result[i] < 0.5 ? result[i] = 0.0 : result[i] = 1.0;
    }

    return result;
}

color reflects(color l1, color l2, int clamp_result) 
{
    color result;
    for (int i = 0; i < 3; ++i) 
    {
        if (l2[i] == 1.0)
            result[i] = l2[i];
        else
            result[i] = sqrt(l1[i]) / (1.0 - l2[i]);
    }

    if (clamp_result)
        result = clamp(result, color(0,0,0), color(1,1,1));

    return result;
}

color addSub(color l1, color l2)
{
    color result;
/* 
    if ((l1[0]+l1[1]+l1[2])/3 >= 0.5)
        result = l1 + l2;
    else
        result = l2 - l1;
 */

    for (int i = 0;i<3;i++)
    {
        if(l1[i] >= 0.5)
            result[i] = l1[i] + l2[i];
        else
            result[i] = l2[i] - l1[i];
    }

    result = clamp(result,color(0,0,0),color(1,1,1));
    return result;
}

color blend(color l1, color l2, float a, string mode,int clamp_result) 
{
    color result;
    if(mode == "Lighten")
        result = max(l1, l2);
    else if(mode == "Darken")
        result = min(l1, l2);
    else if(mode == "Multiply")
        result = l1 * l2;
    else if(mode == "Average")
        result = (l1 + l2) * 0.5;
    else if(mode == "Add")
    {
        result = l1 + l2;
        if (clamp_result)
            result = min(result, color(1,1,1));
    }
    else if(mode == "Subtract")
    {
        result = l1 + l2 - color(1,1,1);
        if (clamp_result)
            result = max(result, color(0,0,0));
    }
    else if(mode == "Difference")
        result = fabs(l1 - l2);
    else if(mode == "Negation")
                result = color(1,1,1) - fabs(color(1,1,1) - l1 - l2);
    else if(mode == "Exclusion")
        result = l1 + l2 - (2.0 * l1 * l2);	
    else if(mode == "Screen")
        result = color(1,1,1) - ((color(1,1,1) - l1) * (color(1,1,1) - l2));
    else if(mode == "Overlay")
        result = overlay(l1, l2);
    else if(mode == "SoftLight")
        result = softlight(l1, l2);
    else if(mode == "HardLight")
        result = overlay(l2, l1);
    else if(mode == "ColorDodge")
        result = colordodge(l1, l2, clamp_result);
    else if(mode == "ColorBurn")
        result = colorburn(l1, l2);
    else if(mode == "LinearLight")
        result = linearlight(l1, l2, clamp_result);
    else if(mode == "VividLight")
        result = vividlight(l1, l2, clamp_result);
    else if(mode == "PinLight")
        result = pinlight(l1, l2);
    else if(mode == "HardMix")
        result = hardmix(l1, l2, clamp_result);
    else if(mode == "Reflect")
        result = reflects(l1, l2, clamp_result);
    else if(mode == "Glow")
        result = reflects(l2, l1, clamp_result);
    else if(mode == "Phoenix")
        result = min(l1, l2) - max(l1, l2) + color(1,1,1);
    else if(mode == "AddSub")
        result = addSub(l1,l2);
    else
        result = l2;

    return lerp(l1, result, a);
}
shader layer_color(
    color layer1 = color(0, 0, 0),
    string layer1_blend = "Normal",
    float layer1_alpha = 1,
    int layer1_enabled = 1,

    color layer2 = color(0, 0, 0),
    string layer2_blend = "Normal",
    float layer2_alpha = 1,
    int layer2_enabled = 0,

    color layer3 = color(0, 0, 0),
    string layer3_blend = "Normal",
    float layer3_alpha = 1,
    int layer3_enabled = 0,

    color layer4 = color(0, 0, 0),
    string layer4_blend = "Normal",
    float layer4_alpha = 1,
    int layer4_enabled = 0,

    color layer5 = color(0, 0, 0),
    string layer5_blend = "Normal",
    float layer5_alpha = 1,
    int layer5_enabled = 0,

    color layer6 = color(0, 0, 0),
    string layer6_blend = "Normal",
    float layer6_alpha = 1,
    int layer6_enabled = 0,

    color layer7 = color(0, 0, 0),
    string layer7_blend = "Normal",
    float layer7_alpha = 1,
    int layer7_enabled = 0,

    color layer8 = color(0, 0, 0),
    string layer8_blend = "Normal",
    float layer8_alpha = 1,
    int layer8_enabled = 0,

    int clamp_result = 1,
    output color outColor = color(0, 0, 0))
{
	color result = color(0);
	color layer[8] = {layer1,layer2,layer3,layer4,layer5,layer6,layer7,layer8};
	string layer_blend[8] = {layer1_blend,layer2_blend,layer3_blend,layer4_blend,layer5_blend,layer6_blend,layer7_blend,layer8_blend};
	float layer_alpha[8] = {layer1_alpha,layer2_alpha,layer3_alpha,layer4_alpha,layer5_alpha,layer6_alpha,layer7_alpha,layer8_alpha};
	int layer_enabled[8] = {layer1_enabled,layer2_enabled,layer3_enabled,layer4_enabled,layer5_enabled,layer6_enabled,layer7_enabled,layer8_enabled};

	for(int i=0;i <8;i++)
	{
		if(layer_enabled[i])
		{
			result = blend(result, layer[i], layer_alpha[i], layer_blend[i], clamp_result);
		}
	}

	outColor = result;
}